Changes in 0.3:

 * Pointers captured in zt_value by zt_pack_pointer() are now constant.
   This allows testing pointers to constants with ZT_NULL and ZT_NOT_NULL.
   This does not impact the ABI.

 * Added ZT_CMP_PTR for comparing pointers for equality and inequality.
   Other relations are explicitly left out, at least for now.

 * ZT_CMP_INT and ZT_CMP_UINT now support maximum integral types of the
   architecture. This allows ZT_CMP_UINT to safely work with size_t values.

   This is achieved in a backwards compatible way. Existing test programs
   compiled and linked with libzt 0.1 or 0.2 retain their current semantic.

   The type zt_value has grown two new kinds, ZT_INTMAX and ZT_UINTMAX,
   along with new union members. The static inline pack functions
   zt_pack_integer and zt_pack_unsigned now take intmax_t and uintmax_t
   arguments respectively. Since they are always inlined this is not an
   ABI break. Test programs built with older definitions of the two pack
   functions use distinct kind (ZT_INTEGER instead of ZT_INTMAX and
   ZT_UNSIGNED instead of ZT_UINTMAX) which is now detected and handled
   by zt_cmp_int and zt_cmp_uint. Internally the values are promoted
   and comparison is always performed on the extended types.

Changes in 0.2:

 * Argument type to all unit test functions was typedef'd
   to zt_t, to abbreviate the boilerplate text and to avoid
   having to type struct zt_test.

 * The field zt_claim.verifier was renamed to zt_claim.make_verifier.
   There is no public API breakage on this as claims are not constructed
   by user code apart from the existing stable helpers.
