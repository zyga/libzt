.Dd January 12, 2020
.Os libzt 0.1
.Dt zt_value 3 PRM
.Sh NAME
.Nm zt_value , zt_value_kind ,
.Nd variant type for passing data into claim verifiers
.Sh SYNOPSIS
.In zt.h
.Vt typedef struct zt_value { ... } zt_value;
.Bl -column "zt_value_kind " "unsigned_integer " Description"
.It Sy Type Ta Sy Entry Ta Sy Description
.It Vt zt_value_kind Ta kind Ta Discriminator for the union
.It Vt const char * Ta source Ta Source code used to compute the value
.It Vt union { ... } Ta as Ta Union containing the actual value
.It Vt bool Ta as.boolean Ta Value when used as ZT_BOOLEAN
.It Vt int Ta as.integer Ta Value when used as ZT_INTEGER
.It Vt unsigned Ta as.unsigned_integer Ta Value when used as ZT_UNSIGNED
.It Vt int Ta as.rune Ta Value when used as ZT_RUNE
.It Vt const char * Ta as.string Ta Value when used as ZT_STRING
.It Vt const void * Ta as.pointer Ta Value when used as ZT_POINTER
.It Vt intmax_t Ta as.intmax Ta Value when used as ZT_INTMAX
.It Vt uintmax_t Ta as.uintmax Ta Value when used as ZT_UINTMAX
.El
.Pp
.Vt typedef enum zt_value_kind { ... } zt_value_kind;
.Bl -column "ZT_NOTHING " " Description"
.It Sy Kind Ta Sy Description
.It Vt ZT_NOTHING Ta Placeholder for unused values
.It Vt ZT_BOOLEAN Ta zt_value.as.boolean is valid
.It Vt ZT_INTEGER Ta zt_value.as.integer is valid (deprecated)
.It Vt ZT_UNSIGNED Ta zt_value.as.unsigned_integer is valid (deprecated)
.It Vt ZT_RUNE Ta zt_value.as.rune is valid
.It Vt ZT_STRING Ta zt_value.as.string is valid
.It Vt ZT_POINTER Ta zt_value.as.pointer is valid
.It Vt ZT_INTMAX Ta zt_value.as.intmax is valid
.It Vt ZT_UINTMAX Ta zt_value.as.uintmax is valid
.El
.Sh DESCRIPTION
.Nm zt_value
is a variant-like type that is used to pass values around libzt internals.
It is comprised of the
.Em kind
enumeration, the
.Em as
union
as well as the
.Em source
string.
.Pp
.Nm zt_value_kind
describes type of verification function arguments.
.Sh IMPLEMENTATION NOTES
.Nm zt_value
exists to pass packed values of several types from the test source code,
through the
.Nm zt_claim
type and into private verification functions that determine test outcome.
.Pp
Tests using binary relations encode the operator as an argument of kind
.Em ZT_STRING .
.Sh BUGS
On some architectures
.Nm ZT_INTEGER
and
.Nm ZT_UNSIGNED
are too short to handle
.Nm size_t
and
.Nm ssize_t
values correctly. They are now deprecated and automatically promoted to
.Nm ZT_INTMAX
and
.Nm ZT_UINTMAX
respectively.
.Sh SEE ALSO
.Xr zt_visit_test_case 3 ,
.Xr zt_visit_test_suite 3
.Sh HISTORY
.Nm zt_value
and
.Nm zt_value_kind
first appeared in libzt 0.1
.Pp
.Nm ZT_INTMAX ,
.Nm ZT_UINTMAX
and the corresponding union members first appeared in libzt 0.3.
.Sh AUTHORS
.An "Zygmunt Krynicki" Aq Mt me@zygoon.pl
